<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns="http://www.springframework.org/schema/beans" xmlns:c="http://www.springframework.org/schema/c"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
             xmlns:beans="http://www.springframework.org/schema/beans">

    <security:global-method-security/>

    <!-- 정적 리소스 파일들에는 보안 설정을 하지 않음 -->
    <security:http pattern="/include/**" security="none"/>
    <security:http auto-config="true" use-expressions="true" create-session="never">
        <!-- 관리자 영역 설정 -->
        <security:intercept-url pattern="/admin/**"
                                access="hasRole('ROLE_ADMIN')"/>
        <!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
        <security:intercept-url pattern="/user/**" access="permitAll"/>

        <!-- 로그인한 사용자 영역 -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_TEST','ROLE_ADMIN','ROLE_GUEST')"/>

        <!-- 로그인폼 -->
        <security:form-login login-page="/user/login.do"
                             login-processing-url="/user/login_check.do"
                             authentication-success-handler-ref="userLoginSuccessHandler"
                             authentication-failure-handler-ref="userLoginFailureHandler"
                             username-parameter="userid" password-parameter="passwd"/>

        <security:session-management>
            <!-- max-sessions="1" 동시접속 막기 error-if-maximum-exceeded="true" 로그인 세션
               초과시 에러 옵션 expired-url="/user/login" 세션 만료시 이동할 주소 -->
            <security:concurrency-control max-sessions="1"
                                          expired-url="/user/login.do" error-if-maximum-exceeded="true"/>
        </security:session-management>

        <!-- 로그아웃 관련 처리 -->
        <security:logout
                delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"
                logout-success-url="/user/login.do" logout-url="/user/logout.do"
                invalidate-session="true"/>

        <!-- 접근권한이 없는 경우의 코드 -->
        <security:access-denied-handler ref="userDeniedHandler"/>

        <!-- 자동 로그인 관련 쿠키 저장, 세션이 종료된 후에도 자동 로그인할 수 있는 기능 86400 1일, 604800 7일 -->
        <security:remember-me key="userKey" token-validity-seconds="86400"/>
    </security:http>

    <!-- 사용자가 입력한 비밀번호를 암호화된 비밀번호와 체크하는 로직이 포함됨 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="passwordEncoder"/>
            <!--<salt-source user-property="username"/>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <beans:bean id="userDeniedHandler" class="edu.kosa.service.UserDeniedHandler"/>
    <beans:bean id="userLoginSuccessHandler" class="edu.kosa.service.UserLoginSuccessHandler"/>
    <beans:bean id="userLoginFailureHandler" class="edu.kosa.service.UserLoginFailureHandler"/>

    <!-- 로그인 인증을 처리하는 빈 -->
    <beans:bean id="userService" class="edu.kosa.service.UserAuthenticationService" c:sqlSession="sqlSession"
                c:sqlSession-ref="sqlSession"/>

    <!-- 비밀번호 암호화 빈 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
        <beans:constructor-arg name="strength" value="256"/>
    </beans:bean>
</beans:beans>